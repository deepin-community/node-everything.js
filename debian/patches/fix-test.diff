Description: fix test for recent mocha
Author: Xavier Guimard <yadd@debian.org>
Forwarded: not-needed
Last-Update: 2020-11-11

--- a/test/parsing.js
+++ b/test/parsing.js
@@ -2,11 +2,11 @@
 
 var fs = require("fs");
 
-suite("parsing", function() {
-  test("can be parsed and evaluated without error by node", function() {
+describe("parsing", function() {
+  it("can be parsed and evaluated without error by node", function() {
     require("..");
   });
-  test("can be parsed by esprima", function() {
+  it("can be parsed by esprima", function() {
     var programText = "" + fs.readFileSync(require.resolve(".."));
     require("esprima").parse(programText);
   });
--- a/test/unit.js
+++ b/test/unit.js
@@ -5,8 +5,8 @@
 
 var programText = "" + fs.readFileSync(require.resolve(".."));
 
-suite("unit", function() {
-  test("contains all whitespace characters", function() {
+describe("unit", function() {
+  it("contains all whitespace characters", function() {
     assert.notEqual(-1, programText.indexOf("\u0009"), "tab");
     assert.notEqual(-1, programText.indexOf("\u000B"), "vertical tab");
     assert.notEqual(-1, programText.indexOf("\u000C"), "form feed");
@@ -14,13 +14,13 @@
     assert.notEqual(-1, programText.indexOf("\u00A0"), "non-breaking space");
     assert.notEqual(-1, programText.indexOf("\uFEFF"), "byte order mark (BOM)");
   });
-  test("contains all newline characters", function() {
+  it("contains all newline characters", function() {
     assert.notEqual(-1, programText.indexOf("\u000A"), "line feed");
     assert.notEqual(-1, programText.indexOf("\u000D"), "carriage return");
     assert.notEqual(-1, programText.indexOf("\u2028"), "line separator");
     assert.notEqual(-1, programText.indexOf("\u2029"), "paragraph separator");
   });
-  test("contains identifier joining characters", function() {
+  it("contains identifier joining characters", function() {
     assert.notEqual(-1, programText.indexOf("\u200C"), "ZWNJ");
     assert.notEqual(-1, programText.indexOf("\u200D"), "ZWJ");
   });
